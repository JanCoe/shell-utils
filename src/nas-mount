#!/usr/bin/env bash
set -eu

# Example use to mount:
# nas-mount --photo ro --movie ro --music rw
# nas-mount photo ro movie ro music rw
#
# nas-mount all is equivalent to
# nas-mount --music rw --photo rw --movie rw 
# To unmount all:
# nas-mount unmount-all

if [[ $#  -eq 0 ]]; then
    printf "%s\n" "Usage:"
    printf "%s\n" "nas-mount --photo ro --movie rw"
    printf "%s\n" "nas-mount all"
    printf "%s\n" "nas-mount unmount-all"

fi

valid_shares=("photo" "music" "movie" "photo_priv")
valid_modes=("ro" "rw")

set_mount_point() {
    local share=$1 
    printf "%s\n" "$HOME/Media/${share^}"
}

unmount_all() {
    local array=("$@")

    for share in "${array[@]}"; do
        local mount_point
        mount_point=$(set_mount_point "$share")

        if mountpoint -q "$mount_point"; then
            printf "%s\n" "Unmounting $mount_point"
            sudo umount "$mount_point"
        fi 
    done
}

# Function to check if value is valid
is_valid() {
    local value=$1
    shift

    local array=("$@")
    for item in "${array[@]}"; do
        [[ "$item" == "$value" ]] && return 0
    done

    return 1
}

# Special command: unmount all
if [[ "${1:-}" == "unmount-all" ]]; then
    unmount_all "${valid_shares[@]}"
    exit 0
fi

if [[ ! -f $HOME/.smbcredentials ]]; then
    printf "%s\n" "Requires a ~/.smbcredentials file"
    exit 1
fi

# Special command: mount all
if [[ "$#" -eq 1 && "$1" == "all" ]]; then
    set -- --photo rw --music rw --movie rw
fi

# Parse input arguments in pairs
while [[ $# -gt 0 ]]; do
    share="${1#--}"  # remove leading -- if present
    mode="$2"
    
    # Validate share
    if ! is_valid "$share" "${valid_shares[@]}"; then
        printf "%s\n" "Invalid share: '$share'"
        exit 1
    fi

    # Validate mode 
    if ! is_valid "$mode" "${valid_modes[@]}"; then
        printf "%s\n" "Invalid mode '$mode' for share '$share'"
        exit 1
    fi

    nas_path="//nas/$share"  # assumes that NAS IP has been mapped to 'nas' in /etc/hosts
    mount_point=$(set_mount_point "$share")

    # Ensure mount point exists
    mkdir -p "$mount_point"

    printf "%s\n" "Mounting $nas_path to $mount_point with mode $mode"

    base_opts="credentials=$HOME/.smbcredentials,vers=3.0"
    case "$mode" in
        ro)
            mount_opts="$base_opts,ro" ;;
        rw)
            mount_opts="$base_opts,rw,uid=$(id -u),gid=$(id -g)" ;;
    esac

    sudo mount -t cifs "$nas_path" "$mount_point" -o "$mount_opts"

    # Move to next pair
    shift 2
done
